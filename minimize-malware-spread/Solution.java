import java.util.Arrays;

public class Solution {
	public int minMalwareSpread(int[][] graph, int[] initial) {
		int nodeNum = graph.length;

		boolean[] initials = new boolean[nodeNum];
		for (int node : initial) {
			initials[node] = true;
		}

		boolean[] infected = new boolean[nodeNum];

		int[] sizes = new int[nodeNum];
		Arrays.fill(sizes, 1);

		int[] nodeToParent = new int[nodeNum];
		Arrays.fill(nodeToParent, -1);

		for (int node1 = 0; node1 < nodeNum; node1++) {
			for (int node2 = node1 + 1; node2 < nodeNum; node2++) {
				if (graph[node1][node2] == 1) {
					int root1 = findRoot(nodeToParent, node1);
					int root2 = findRoot(nodeToParent, node2);

					if (root1 != root2) {
						if (initials[root1]) {
							if (initials[root2]) {
								infected[root1] = true;
								infected[root2] = true;
							}

							nodeToParent[root2] = root1;
							sizes[root1] += sizes[root2];
						} else {
							nodeToParent[root1] = root2;
							sizes[root2] += sizes[root1];
						}
					}
				}
			}
		}

		int maxSize = -1;
		int firstNodeWithMaxSize = -1;
		for (int node = 0; node < nodeNum; node++) {
			if (initials[node] && !infected[node] && sizes[node] > maxSize) {
				maxSize = sizes[node];
				firstNodeWithMaxSize = node;
			}
		}
		if (firstNodeWithMaxSize != -1) {
			return firstNodeWithMaxSize;
		}

		for (int node = 0;; node++) {
			if (initials[node]) {
				return node;
			}
		}
	}

	int findRoot(int[] nodeToParent, int node) {
		int root = node;
		while (nodeToParent[root] >= 0) {
			root = nodeToParent[root];
		}

		int p = node;
		while (p != root) {
			int parent = nodeToParent[p];
			nodeToParent[p] = root;
			p = parent;
		}

		return root;
	}
}
